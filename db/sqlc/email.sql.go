// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: email.sql

package db

import (
	"context"
)

const createEmail = `-- name: CreateEmail :one
INSERT INTO emails (
  subjectEmail, messageEmail
) VALUES (
  $1, $2
)
RETURNING id, datesendemail, subjectemail, messageemail
`

type CreateEmailParams struct {
	Subjectemail string `json:"subjectemail"`
	Messageemail string `json:"messageemail"`
}

func (q *Queries) CreateEmail(ctx context.Context, arg CreateEmailParams) (Email, error) {
	row := q.db.QueryRowContext(ctx, createEmail, arg.Subjectemail, arg.Messageemail)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.Datesendemail,
		&i.Subjectemail,
		&i.Messageemail,
	)
	return i, err
}

const deleteEmail = `-- name: DeleteEmail :exec
DELETE FROM emails
WHERE id = $1
`

func (q *Queries) DeleteEmail(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteEmail, id)
	return err
}

const getEmail = `-- name: GetEmail :one
SELECT id, datesendemail, subjectemail, messageemail FROM emails
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEmail(ctx context.Context, id int32) (Email, error) {
	row := q.db.QueryRowContext(ctx, getEmail, id)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.Datesendemail,
		&i.Subjectemail,
		&i.Messageemail,
	)
	return i, err
}

const listemails = `-- name: Listemails :many
SELECT id, datesendemail, subjectemail, messageemail FROM emails
ORDER BY subjectEmail
`

func (q *Queries) Listemails(ctx context.Context) ([]Email, error) {
	rows, err := q.db.QueryContext(ctx, listemails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Email{}
	for rows.Next() {
		var i Email
		if err := rows.Scan(
			&i.ID,
			&i.Datesendemail,
			&i.Subjectemail,
			&i.Messageemail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmail = `-- name: UpdateEmail :one
UPDATE emails
  set subjectEmail = $2,
  messageEmail = $3
WHERE id = $1
RETURNING id, datesendemail, subjectemail, messageemail
`

type UpdateEmailParams struct {
	ID           int32  `json:"id"`
	Subjectemail string `json:"subjectemail"`
	Messageemail string `json:"messageemail"`
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) (Email, error) {
	row := q.db.QueryRowContext(ctx, updateEmail, arg.ID, arg.Subjectemail, arg.Messageemail)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.Datesendemail,
		&i.Subjectemail,
		&i.Messageemail,
	)
	return i, err
}
